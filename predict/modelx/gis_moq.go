// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package modelx

import (
	"sync"
)

// Ensure, that GISServerMock does implement GISServerInterface.
// If this is not the case, regenerate this file with moq.
var _ GISServerInterface = &GISServerMock{}

// GISServerMock is a mock implementation of GISServerInterface.
//
// 	func TestSomethingThatUsesGISServerInterface(t *testing.T) {
//
// 		// make and configure a mocked GISServerInterface
// 		mockedGISServerInterface := &GISServerMock{
// 			GetSitesPolyFunc: func(area uint64) []uint64 {
// 				panic("mock out the GetSitesPoly method")
// 			},
// 		}
//
// 		// use mockedGISServerInterface in code that requires GISServerInterface
// 		// and then make assertions.
//
// 	}
type GISServerMock struct {
	// GetSitesPolyFunc mocks the GetSitesPoly method.
	GetSitesPolyFunc func(area uint64) []uint64

	// calls tracks calls to the methods.
	calls struct {
		// GetSitesPoly holds details about calls to the GetSitesPoly method.
		GetSitesPoly []struct {
			// Area is the area argument value.
			Area uint64
		}
	}
	lockGetSitesPoly sync.RWMutex
}

// GetSitesPoly calls GetSitesPolyFunc.
func (mock *GISServerMock) GetSitesPoly(area uint64) []uint64 {
	if mock.GetSitesPolyFunc == nil {
		panic("GISServerMock.GetSitesPolyFunc: method is nil but GISServerInterface.GetSitesPoly was just called")
	}
	callInfo := struct {
		Area uint64
	}{
		Area: area,
	}
	mock.lockGetSitesPoly.Lock()
	mock.calls.GetSitesPoly = append(mock.calls.GetSitesPoly, callInfo)
	mock.lockGetSitesPoly.Unlock()
	return mock.GetSitesPolyFunc(area)
}

// GetSitesPolyCalls gets all the calls that were made to GetSitesPoly.
// Check the length with:
//     len(mockedGISServerInterface.GetSitesPolyCalls())
func (mock *GISServerMock) GetSitesPolyCalls() []struct {
	Area uint64
} {
	var calls []struct {
		Area uint64
	}
	mock.lockGetSitesPoly.RLock()
	calls = mock.calls.GetSitesPoly
	mock.lockGetSitesPoly.RUnlock()
	return calls
}
